#include "rs232.h"
#include <fcntl.h>   /* File control definitions */
#include <netdb.h> /* getprotobyname */
#include <time.h>


//data lengths:
int commLength= 200;

int main( int argc, char *argv[] )
{	
/*
    FORWARDING TO GSM:

            pavyzdys2.c -> gsmListener
            
            *klausosi gaunamu komandu per socketa
*/

	receiver(argc, &argv);

	return(0);
}

void receiver( int argc, char *argv[] ){

	char protoname[] = "tcp";
    struct protoent *protoent;
    int enable = 1;
    int server_sockfd, client_sockfd;
    socklen_t client_len;
    ssize_t nbytes_read;
    struct sockaddr_in client_address, server_address;
    unsigned short server_port = 12345u;

    if (argc > 1) {
        server_port = strtol(argv[1], NULL, 10);
    }

    protoent = getprotobyname(protoname);
    if (protoent == NULL) {
        perror("getprotobyname");
        exit(EXIT_FAILURE);
    }

    server_sockfd = socket(
        AF_INET,
        SOCK_STREAM,
        protoent->p_proto
        /* 0 */
    );
    if (server_sockfd == -1) {
        perror("socket");
        exit(EXIT_FAILURE);
    }

    if (setsockopt(server_sockfd, SOL_SOCKET, SO_REUSEADDR, &enable, sizeof(enable)) < 0) {
        perror("setsockopt(SO_REUSEADDR) failed");
        exit(EXIT_FAILURE);
    }

    server_address.sin_family = AF_INET;
    server_address.sin_addr.s_addr = htonl(INADDR_ANY);
    server_address.sin_port = htons(server_port);
    if (bind(
            server_sockfd,
            (struct sockaddr*)&server_address,
            sizeof(server_address)
        ) == -1
    ) {
        perror("bind");
        exit(EXIT_FAILURE);
    }

    if (listen(server_sockfd, 5) == -1) {
        perror("listen");
        exit(EXIT_FAILURE);
	}
	fprintf(stderr, "listening on port %d\n", server_port);

    char commArray[commLength];
	char *buffer= (char *) malloc(BUFSIZ);

	while(1){
		client_len = sizeof(client_address);
        client_sockfd = accept(
            server_sockfd,
            (struct sockaddr*)&client_address,
            &client_len
        );

	    if((nbytes_read = read(client_sockfd, buffer, BUFSIZ)) > 0){

		    memcpy(commArray, &buffer[0], nbytes_read);
		    commArray[nbytes_read] = '\0';

		    printf("\n---------------------------------------------\n");
		    printf("command: %s\n", commArray);
            commandToShell(commArray);
	    }
	}

}

void commandToShell(char *command){
    system(command);
}
